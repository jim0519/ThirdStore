@model JobItemViewModel

@*<style>
        /*Batch Edit Mode*/
        .k-edit-cell input {
            width: 100%;
        }

        /*InLine Edit Mode*/
        .k-grid-edit-row input {
            width: 100%;
        }
    </style>*@

@Html.HiddenFor(model => model.ID)
@*<!-- The Templates plugin is included to render the upload/download listings -->
    <script src="https://blueimp.github.io/JavaScript-Templates/js/tmpl.min.js"></script>
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="https://blueimp.github.io/JavaScript-Load-Image/js/load-image.all.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="https://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>
    <!-- blueimp Gallery script -->
    <script src="https://blueimp.github.io/Gallery/js/jquery.blueimp-gallery.min.js"></script>
    <!-- The basic File Upload plugin -->
    <script src="~/Scripts/FileUpload/jquery.fileupload.js"></script>
    <!-- The File Upload processing plugin -->
    <script src="~/Scripts/FileUpload/jquery.fileupload-process.js"></script>
    <!-- The File Upload image preview & resize plugin -->
    <script src="~/Scripts/FileUpload/jquery.fileupload-image.js"></script>
    <!-- The File Upload validation plugin -->
    <script src="~/Scripts/FileUpload/jquery.fileupload-validate.js"></script>
    <!-- The File Upload user interface plugin -->
    <script src="~/Scripts/FileUpload/jquery.fileupload-ui.js"></script>*@
@Html.ValidationSummary()
<div id="tabs">
    <ul>
        <li><a href="#tabs-1">Basic Info</a></li>
        <li><a href="#tabs-2">Images</a></li>
    </ul>

    <div id="tabs-1">
        @*@Html.ValidationSummary(false)*@
        <div>
            @BasicInfo()
        </div>
        <div>
            @ChildItems()
        </div>

    </div>
    <div id="tabs-2">
        @Images()
    </div>
</div>
<div>
    <input type="submit" name="save-print" class="k-button" value="Save & Print" />
    <input type="submit" name="save" class="k-button" value="Save" />
    <a href="@Html.Raw(Url.Action("List", "JobItem"))"><input type="button" id="btnCancel" class="k-button" value="Cancel" /></a>
</div>




@helper BasicInfo()
{
    <table style="width:100%;">
        <tr>
            <td>
                @Html.LabelFor(m => m.Type)

            </td>
            <td>
                @Html.DropDownListFor(model => model.Type, Model.JobItemTypes)

            </td>
            <td>
                @Html.LabelFor(m => m.Reference)
            </td>
            <td>
                @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @readonly = "readonly" } })
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(m => m.ConditionID)

            </td>
            <td>

                @Html.DropDownListFor(model => model.ConditionID, Model.JobItemConditions)
            </td>
            <td>
                @Html.LabelFor(m => m.ItemName)

            </td>
            <td>
                @Html.EditorFor(model => model.ItemName)

            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(m => m.Location)
            </td>
            <td>
                @Html.EditorFor(model => model.Location, new { htmlAttributes = new { @style = "text-transform:uppercase" } })
            </td>

            <td>
                @Html.LabelFor(m => m.ItemPrice)
            </td>
            <td>
                @Html.EditorFor(model => model.ItemPrice)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(m => m.ItemDetail)

            </td>
            <td>

                @Html.TextAreaFor(model => model.ItemDetail, 4, 30, null)
            </td>
            <td>
                @Html.LabelFor(m => m.Note)
            </td>
            <td>
                @Html.TextAreaFor(model => model.Note, 4, 30, null)
            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(m => m.DesignatedSKU)

            </td>
            <td>
                @Html.EditorFor(model => model.DesignatedSKU)
                @if (!string.IsNullOrWhiteSpace(Model.DesignatedSKU))
                {
                    <a href='@Url.Action("EditBySKU", "Item")?SKU=@Model.DesignatedSKU' target='_blank'>View</a>
                }
                @*@Html.ValidationMessageFor(model => model.DesignatedSKU)*@
            </td>
            <td>
                @Html.LabelFor(m => m.StatusID)
            </td>
            <td>
                @Html.DropDownListFor(model => model.StatusID, Model.JobItemStatuses)

            </td>
        </tr>
        <tr>
            <td>
                @*@Html.LabelFor(m => m.Ref1)*@
                @Html.LabelFor(m => m.Ref2)
            </td>
            <td>
                @*@Html.EditorFor(model => model.Ref2)*@
                @*@Html.EditorFor(model => model.Ref1, new { htmlAttributes = new { @readonly = "readonly" } })*@
                @Html.EditorFor(model => model.Ref2, new { SelectList = Model.InspectorList })
            </td>
            <td>
                @Html.LabelFor(m => m.ShipTime)

            </td>
            <td>
                @Html.EditorFor(model => model.ShipTime)

            </td>
        </tr>
        <tr>
            <td>
                @Html.LabelFor(m => m.PricePercentage)
            </td>
            <td>
                @Html.EditorFor(model => model.PricePercentage)
            </td>
            <td>
                @Html.LabelFor(m => m.TrackingNumber)
            </td>
            <td>
                @Html.EditorFor(model => model.TrackingNumber)
            </td>
        </tr>
    </table>

}

@helper ChildItems()
{
    <div id="jobItemLine-grid"></div>
    <script>
        $(document).ready(function () {

            $("#jobItemLine-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("ReadJobItemLines", "JobItem", new { jobItemID = Model.ID, fromReturnItemID = Request.Params["FromReturnItemID"] }))",
                            type: "POST",
                            dataType: "json"
                        },
                        update: function (e) { },
                        create: function (e) { },
                        destroy:{
                            url: "@Html.Raw(Url.Action("JobItemLineDelete", "JobItem"))",
                            type: "POST",
                            dataType: "json"
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "ID",
                            fields: {
                                ID: { editable: false, type: "number" },
                                ItemID: { editable: false, type: "number" },
                                SKU: {
                                    editable: true, type: "string", validation: {
                                        required: true,
                                        skuvalidation: function (input) {
                                            //debugger;
                                            var isValid = true;
                                            if (input.is("[name='SKU']")) {

                                                $.ajax({
                                                    url: '@Url.Action("CheckInputSKU", "JobItem")',
                                                    type: "POST",
                                                    //contentType: "application/json; charset=utf-8",
                                                    data: { inputSKU: input.val() },
                                                    dataType: "json",
                                                    async: false,
                                                    success: function (data) {
                                                        //debugger;
                                                        if (data.Result) {
                                                            isValid = true;
                                                        }
                                                        else {
                                                            input.attr("data-skuvalidation-msg", data.ErrMessage);
                                                            isValid = false;
                                                        }
                                                    },
                                                    error: function (data) {
                                                        //debugger;
                                                        alert("sku check error");
                                                        isValid = false;
                                                    }
                                                });
                                            }
                                            else
                                                isValid = true;
                                            return isValid;
                                        }
                                    }
                                },
                                Qty: { editable: false, type: "number", validation: { required: true, min:1 }, defaultValue:1 },

                                IsOrginalPackage: { editable: true, type: "boolean" },
                                Weight: { editable: true, type: "number"},
                                Length: { editable: true, type: "number"},
                                Width: { editable: true, type: "number"},
                                Height: { editable: true, type: "number"},
                                CubicWeight: { editable: true, type: "number" },
                                Ref1: { editable: true, type: "number" }
                            }
                        }
                    },
                    pageSize: "100",
                    requestEnd: function (e) {
                        //debugger;
                        if (e.type == "create" || e.type == "update") {

                            //this.read();
                        }
                    },
                    error: function (e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },

                },
                pageable: {
                    refresh: true,
                    pageSizes: ["100"]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                toolbar: ["create"],
                edit: function (e) {
                    //debugger;
                    if (e.container.find('.k-grid-cancel') != "undefined") {
                        e.container.find('.k-grid-cancel').hide();
                    }
                    if (e.model.isNew()) {
                    }

                    //debugger;
                    $("[name='SKU']", e.container).change(function () {
                        var skuValue = $(this).val();
                        $.ajax({
                            type: "POST",
                            url: '@Url.Action("GetItemInfo", "Item")',
                            dataType: 'json',
                            data: { sku: skuValue },
                            success: function (response) {
                                //debugger;
                                if (response.Result) {
                                    var lengthInput = e.container.find("[name='Length']");
                                    var lengthWidget = lengthInput.data("kendoNumericTextBox");
                                    var heightWidget = e.container.find("[name='Height']").data("kendoNumericTextBox");
                                    var widthWidget = e.container.find("[name='Width']").data("kendoNumericTextBox");
                                    var weightWidget = e.container.find("[name='Weight']").data("kendoNumericTextBox");
                                    var cubicWeightWidget = e.container.find("[name='CubicWeight']").data("kendoNumericTextBox");
                                    var cbmWidget = e.container.find("[name='Ref1']").data("kendoNumericTextBox");
                                    lengthWidget.value(response.ItemLength);
                                    lengthWidget.trigger("change");
                                    heightWidget.value(response.ItemHeight);
                                    heightWidget.trigger("change");
                                    widthWidget.value(response.ItemWidth);
                                    widthWidget.trigger("change");
                                    weightWidget.value(response.ItemWeight);
                                    weightWidget.trigger("change");
                                    cubicWeightWidget.value(response.ItemCubicWeight);
                                    cubicWeightWidget.trigger("change");
                                    cbmWidget.value(response.ItemCubicMeter);
                                    cbmWidget.trigger("change");
                                    if (skuValue.toUpperCase() != response.SKU.toUpperCase()) {
                                        $("[name='SKU']").val(response.SKU);
                                        $("[name='SKU']").trigger("change");
                                    }
                                    //$("[name='Length']", e.container).val(response.ItemLength);
                                }
                                //change description column here?
                            },
                            error: function (response) {
                                alert(response);
                            }
                        });
                    });
                },
                columns: [{
                    field: "ID",
                    template: "<input type='hidden' name='JobItemViewLines[#= index(data)#].ID' value='#=ID#' />",
                    hidden: true
                }, {
                        field: "ItemID",
                        template: "<input type='hidden' name='JobItemViewLines[#= index(data)#].ItemID' value='#=ItemID#' />",
                        hidden: true
                }, {
                        field: "SKU",
                        template: "<a href='@Url.Action("EditBySKU", "Item")?SKU=#=SKU#' target='_blank' > #=SKU#</a>" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].SKU' value='#=SKU#' />",
                        width:200
                }, {
                        field: "Qty",
                    title: "Qty",
                        template: "#=Qty#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].Qty' value='#=Qty#' />",
                        width: 70,
                        hidden: true
                    }, {
                        field: "Weight",
                        title: "Weight",
                        template: "#=Weight#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].Weight' value='#=Weight#' />",
                        width: 100,
                        format: "{0:n4}",
                        editor: editNumber
                    }, {
                        field: "Length",
                        title: "Length",
                        template: "#=Length#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].Length' value='#=Length#' />",
                        width: 100,
                        format: "{0:n4}",
                        editor: editNumber
                    }, {
                        field: "Width",
                        title: "Width",
                        template: "#=Width#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].Width' value='#=Width#' />",
                        width: 100,
                        format: "{0:n4}",
                        editor: editNumber
                    }, {
                        field: "Height",
                        title: "Height",
                        template: "#=Height#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].Height' value='#=Height#' />",
                        width: 100,
                        format: "{0:n4}",
                        editor: editNumber
                    }, {
                        field: "CubicWeight",
                        title: "CbcWgt",
                        template: "#=CubicWeight#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].CubicWeight' value='#=CubicWeight#' />",
                        width: 100,
                        format: "{0:n4}",
                        editor: editNumber
                    }, {
                        field: "Ref1",
                        title: "CBM",
                        template: "#=Ref1#" + "<input type='hidden' name='JobItemViewLines[#= index(data)#].Ref1' value='#=Ref1#' />",
                        width: 100,
                        format: "{0:n4}",
                        editor: editNumber
                    },
                    //{
                    //    field: "CreateBy",
                    //    template: "<input type='hidden' name='JobItemViewLines[#= index(data)#].CreateBy' value='#=CreateBy#' />",
                    //    hidden: true
                    //}, {
                    //    field: "CreateTime",
                    //    template: "<input type='hidden' name='JobItemViewLines[#= index(data)#].CreateTime' value='#=CreateTime#' />",
                    //    hidden: true
                    //}, {
                    //    field: "EditBy",
                    //    template: "<input type='hidden' name='JobItemViewLines[#= index(data)#].EditBy' value='#=EditBy#' />",
                    //    hidden: true
                    //}, {
                    //    field: "EditTime",
                    //    template: "<input type='hidden' name='JobItemViewLines[#= index(data)#].EditTime' value='#=EditTime#' />",
                    //    hidden: true
                    //},
                    {
                    command: ["edit"
                        @*@if(Model.ID==0)
                    {
                        <text>*@
                        , { name: "destroy", text: "Del" }
                //    </text>
                //}
                    ], title: "&nbsp;", width: "100px"
                }]
            });
        });


    function index(dataItem) {
        var data = $("#jobItemLine-grid").data("kendoGrid").dataSource.data();
        //debugger;
        return data.indexOf(dataItem);
        }

        function editNumber(container, options) {
            let placeHolder = "";
            if (options.field == "Weight") { placeHolder = "kg"; } else if (options.field == "CubicWeight" || options.field == "Ref1") { placeHolder = "m3"; } else { placeHolder = "m"; }
            $('<input data-bind="value:' + options.field + '" name="' + options.field + '" placeholder="' + placeHolder + '" />' + placeHolder )
                .appendTo(container)
                .kendoNumericTextBox({
                    spinners: false,
                    format: "#.00" + placeHolder,
                    decimals: 4
                });
        }

    </script>
}


@helper Images()
{

    <input type="file" id="uploadImages" name="uploadImages" multiple accept="image/*" />
    <input type="button" id="btnUpload" value="Upload" />
    <div id="jobItemImage-grid"></div>
}

<script>
        $(document).ready(function () {
            $("#tabs").tabs();

             $('#@Html.FieldIdFor(model => model.ItemName)').on('input propertychange', function () {
            CharLimit(this, 80);
                });

            $("input[type=submit]").click(function () {
                debugger;
                var isValid = true;
                var isPrintLabel = ($(this).attr('name').includes("print") ? true : false);
                $.ajax({
                    //url: '@Url.Action("ValidateInput", "JobItem",new { IsPrintLabel= "_isPrintLabel_" })'.replace('_isPrintLabel_', isPrintLabel),
                    url: '@Url.Action("ValidateInput", "JobItem")',
                    type: "POST",
                    async: false,
                    data: $("#opForm").serialize() + '&IsPrintLabel=' + isPrintLabel,
                    success: function (response) {
                        //debugger;
                        if (response.Result)
                            //$(form).submit();
                            isValid = true;
                        else {
                            if (response.Message != undefined) {
                                appendValidateSummary(response.Message);
                            }
                            isValid = false;
                        }
                    },
                    error: function (response) {
                        //form.submit();
                        isValid = true;
                    }
                });
                return isValid;
            });

            @*$("#opForm").validate({
                rules: {},
                highlight: {},
                messages: {},
                submitHandler: function (form) {
                    $.ajax({
                        url:'@Url.Action("ValidateInput", "JobItem")',
                        type: "POST",
                        data: $(form).serialize(),
                        success: function (response) {
                            debugger;
                            if (response.Result)
                                $(form).submit();
                                //return true;
                            else
                                return false;
                        },
                        error: function (response) {
                            form.submit();
                        }
                    });
                }
            });*@

            $('#btnUpload').click(function () {
                var data = new FormData();
                var files = $("#uploadImages").get(0).files;
                if (files.length > 0) {
                    for (var x = 0; x < files.length; x++) {
                        data.append("JobItemImages",files[x]);
                    }
                    //data.append("JobItemImages", files);
                }

                var link = '@Html.Raw(@Url.Action("UploadImages","JobItem"))';
                //debugger;
                $.ajax({
                    url: link,
                    type: "POST",
                    processData: false,
                    contentType: false,
                    data: data,
                    success: function (response) {
                        //code after success
                        //debugger;

                        if (response.ImageList != undefined) {
                            var grid = $("#jobItemImage-grid").data("kendoGrid");
                            var data = grid.dataSource.data().toJSON(); //the data of the DataSource
                            var newRowIndex = data.length;
                            //var res = Math.max.apply(Math, array.map(function (o) { return o.y; }))
                            $.each(response.ImageList, function (i, item) {
                                //debugger;
                                //alert(key + ": " + value);
                                var newImage = { ID: 0, ImageID: item['ImageID'], ImageName: item['ImageName'], ImageURL: item['ImageURL'],DisplayOrder: newRowIndex, StatusID: true};
                                data.push(newImage);
                                newRowIndex++;
                            });

                            grid.dataSource.data(data);

                        }
                        alert("Images upload success.")
                    },
                    error: function (er) {
                        alert(er);
                    }

                });
            });


            $("#jobItemImage-grid").kendoGrid({
                dataSource: {
                    type: "json",
                    transport: {
                        read: {
                            url: "@Html.Raw(Url.Action("ReadJobItemImages", "JobItem", new { jobItemID = Model.ID,fromJobItemID= Request.Params["FromJobItemID"] }))",
                            type: "POST",
                            dataType: "json"
                        },
                        update: function (e) { },
                        create: function (e) { },
                        destroy: {
                            url: "@Html.Raw(Url.Action("JobItemImageDelete", "JobItem"))",
                            type: "POST",
                            dataType: "json"
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total",
                        errors: "Errors",
                        model: {
                            id: "ID",
                            fields: {
                                ID: { editable: false, type: "number" },
                                ImageID: { editable: false, type: "number" },
                                ImageURL: { editable: false, type: "string" },
                                ImageName: { editable: false, type: "string" },
                                DisplayOrder: {
                                    editable: true, type: "number"
                                },
                                StatusID: { editable: true, type: "boolean" }
                            }
                        }
                    },
                    pageSize: "100",
                    requestEnd: function (e) {
                        //debugger;
                        if (e.type == "create" || e.type == "update") {

                            //this.read();
                        }
                    },
                    error: function (e) {
                        display_kendoui_grid_error(e);
                        // Cancel the changes
                        this.cancelChanges();
                    },

                },
                pageable: {
                    refresh: true,
                    pageSizes: ["100"]
                },
                editable: {
                    confirmation: false,
                    mode: "inline"
                },
                scrollable: false,
                edit: function (e) {
                    //debugger;
                    if (e.container.find('.k-grid-cancel') != "undefined") {
                        e.container.find('.k-grid-cancel').hide();
                    }
                    if (e.model.isNew()) {
                    }
                },
                columns: [{
                    field: "ID",
                    template: "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].ID' value='#=ID#' />",
                    hidden: true
                }, {
                        field: "ImageID",
                        template: "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].ImageID' value='#=ImageID#' />",
                    hidden: true
                    },
                    {
                        field: "ImageURL",
                        title: "Image",
                        template: '<a href="#=ImageURL#" target="_blank"><img alt="#=ImageID#" src="#=ImageURL#" width="150" /></a>',
                        width: 200
                    },
                    {
                        field: "ImageName",
                        title: "Image Name",
                        template: '<a href="#=ImageURL#" target="_blank">#=ImageName#</a>',
                        width: 200
                    },
                    //{
                    //    field: "CreateBy",
                    //    template: "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].CreateBy' value='#=CreateBy#' />",
                    //    hidden: true
                    //}, {
                    //    field: "CreateTime",
                    //    template: "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].CreateTime' value='#=CreateTime#' />",
                    //    hidden: true
                    //}, {
                    //    field: "EditBy",
                    //    template: "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].EditBy' value='#=EditBy#' />",
                    //    hidden: true
                    //}, {
                    //    field: "EditTime",
                    //    template: "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].EditTime' value='#=EditTime#' />",
                    //    hidden: true
                    //},
                    {
                        field: "DisplayOrder",
                        template: "#=DisplayOrder#" + "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].DisplayOrder' value='#=DisplayOrder#' />"
                }, {
                        field: "StatusID",
                        title: "Status",
                        headerAttributes: { style: "text-align:center" },
                        attributes: { style: "text-align:center" },
                        template: '<img src="@Url.Content("~/Content/images/")active-#=StatusID#.gif" />' + "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].StatusID' value='#=StatusID#' />"
                        //template: "#=StatusID#" + "<input type='hidden' name='JobItemViewImages[#= imgIndex(data)#].StatusID' value='#=StatusID#' />",
                    }, {
                    command: ["edit"
                        @*@if(Model.ID==0)
                    {
                        <text>*@
                        , { name: "destroy", text: "Del" }
                //    </text>
                //}
                    ], title: "&nbsp;", width: "150px"
                }]
            });

        });

        function imgIndex(dataItem) {
            var data = $("#jobItemImage-grid").data("kendoGrid").dataSource.data();
            return data.indexOf(dataItem);
        }

    function appendValidateSummary(appendMessage) {
        var formValidator = $("#opForm").validate({});
        var errorList = [];

        // get existing summary errors from jQuery validate
        $.each(formValidator.errorList, function (index, errorListItem) {
            errorList.push(errorListItem.message);
        });
        errorList.push(appendMessage);

        if (errorList.length > 0) {
            // find summary div
            var $summary = $("#opForm").find("[data-valmsg-summary=true]");

            // find the unordered list
            var $ul = $summary.find("ul");

            // Clear existing errors from DOM by removing all element from the list
            $ul.empty();
            // Add all errors to the list
            $.each(errorList, function (index, message) {
                $("<li />").html(message).appendTo($ul);
            });

            // Add the appropriate class to the summary div
            $summary.removeClass("validation-summary-valid")
                .addClass("validation-summary-errors");
        }
    }

    function CharLimit(input, maxChar) {
        var len = $(input).val().length;
        if (len > maxChar) {
            $(input).val($(input).val().substring(0, maxChar));
        }
    }
</script>

